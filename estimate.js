document.addEventListener('DOMContentLoaded', function () {
    const calculateBtn = document.getElementById('calculateBtn');
    calculateBtn.addEventListener('click', calculateRunningPower);
});
const runningPowerCol = { 1500: 1, 1600: 2, 3000: 3, 3200: 4, 5000: 5, 10000: 6, 15000: 7, 21097.5: 8, 42195: 9 };

const runningPower = [
    [30, 510.0, 551.0, 1076.0, 1159.0, 1840.0, 3826.0, 5894.0, 8464.0, 17357.0],
    [31, 495.0, 535.0, 1047.0, 1128.0, 1791.0, 3723.0, 5736.0, 8241.0, 16917.0],
    [32, 482.0, 521.0, 1019.0, 1098.0, 1745.0, 3626.0, 5587.0, 8029.0, 16499.0],
    [33, 469.0, 507.0, 993.0, 1070.0, 1701.0, 3534.0, 5445.0, 7827.0, 16102.0],
    [34, 457.0, 494.0, 969.0, 1044.0, 1659.0, 3446.0, 5310.0, 7636.0, 15723.0],
    [35, 445.0, 481.0, 945.0, 1018.0, 1620.0, 3363.0, 5182.0, 7453.0, 15363.0],
    [36, 434.0, 469.0, 923.0, 994.0, 1582.0, 3284.0, 5060.0, 7279.0, 15019.0],
    [37, 424.0, 458.0, 901.0, 971.0, 1546.0, 3209.0, 4944.0, 7114.0, 14690.0],
    [38, 414.0, 447.0, 881.0, 949.0, 1512.0, 3137.0, 4833.0, 6955.0, 14375.0],
    [39, 404.0, 437.0, 861.0, 929.0, 1479.0, 3069.0, 4727.0, 6804.0, 14074.0],
    [40, 395.0, 427.0, 843.0, 908.0, 1448.0, 3003.0, 4626.0, 6659.0, 13785.0],
    [41, 387.0, 418.0, 825.0, 889.0, 1418.0, 2941.0, 4529.0, 6520.0, 13509.0],
    [42, 379.0, 409.0, 808.0, 871.0, 1389.0, 2881.0, 4436.0, 6387.0, 13243.0],
    [43, 371.0, 401.0, 791.0, 853.0, 1361.0, 2824.0, 4347.0, 6260.0, 12988.0],
    [44, 363.0, 392.0, 775.0, 836.0, 1335.0, 2769.0, 4262.0, 6137.0, 12753.0],
    [45, 356.0, 385.0, 760.0, 820.0, 1310.0, 2716.0, 4180.0, 6020.0, 12506.0],
    [46, 349.0, 377.0, 746.0, 805.0, 1285.0, 2665.0, 4102.0, 5907.0, 12279.0],
    [47, 342.0, 370.0, 732.0, 790.0, 1262.0, 2616.0, 4026.0, 5798.0, 12060.0],
    [48, 336.0, 363.0, 718.0, 775.0, 1239.0, 2570.0, 3953.0, 5693.0, 11849.0],
    [49, 330.0, 356.0, 705.0, 761.0, 1218.0, 2524.0, 3884.0, 5592.0, 11646.0],
    [50, 324.0, 350.0, 693.0, 748.0, 1197.0, 2481.0, 3816.0, 5495.0, 11449.0],
    [51, 318.0, 344.0, 681.0, 735.0, 1176.0, 2439.0, 3751.0, 5402.0, 11259.0],
    [52, 313.0, 338.0, 669.0, 722.0, 1157.0, 2399.0, 3689.0, 5311.0, 11076.0],
    [53, 307.0, 332.0, 658.0, 710.0, 1138.0, 2360.0, 3628.0, 5224.0, 10899.0],
    [54, 302.0, 327.0, 647.0, 699.0, 1120.0, 1722.0, 3570.0, 5140.0, 10727.0],
    [55, 297.0, 321.0, 637.0, 688.0, 1102.0, 2286.0, 3513.0, 5058.0, 10561.0],
    [56, 293.0, 316.0, 627.0, 677.0, 1085.0, 2251.0, 3459.0, 4980.0, 10400.0],
    [57, 288.0, 311.0, 617.0, 666.0, 1069.0, 2217.0, 3406.0, 4903.0, 10245.0],
    [58, 284.0, 306.0, 608.0, 656.0, 1053.0, 2184.0, 3355.0, 4830.0, 10094.0],
    [59, 279.0, 302.0, 598.0, 646.0, 1037.0, 2152.0, 3306.0, 4758.0, 9947.0],
    [60, 275.0, 297.0, 590.0, 637.0, 1023.0, 2122.0, 3258.0, 4689.0, 9805.0],
    [61, 271.0, 293.0, 581.0, 627.0, 1008.0, 2092.0, 3212.0, 4622.0, 9668.0],
    [62, 267.0, 289.0, 573.0, 618.0, 994.0, 2063.0, 3167.0, 4557.0, 9534.0],
    [63, 264.0, 285.0, 565.0, 610.0, 980.0, 2035.0, 3123.0, 4494.0, 9404.0],
    [64, 260.0, 281.0, 557.0, 601.0, 967.0, 2008.0, 3081.0, 4433.0, 9278.0],
    [65, 256.0, 277.0, 549.0, 593.0, 954.0, 1981.0, 3040.0, 4373.0, 9155.0],
    [66, 253.0, 273.0, 542.0, 585.0, 942.0, 1955.0, 3000.0, 4316.0, 9036.0],
    [67, 250.0, 270.0, 535.0, 577.0, 929.0, 1931.0, 2962.0, 4260.0, 8920.0],
    [68, 246.0, 266.0, 528.0, 570.0, 918.0, 1906.0, 2924.0, 4205.0, 8807.0],
    [69, 243.0, 263.0, 521.0, 563.0, 906.0, 1883.0, 2888.0, 4752.0, 8697.0],
    [70, 240.0, 259.0, 514.0, 556.0, 895.0, 1860.0, 2852.0, 4101.0, 8590.0],
    [71, 237.0, 256.0, 508.0, 549.0, 884.0, 1838.0, 2818.0, 4051.0, 8486.0],
    [72, 234.0, 253.0, 502.0, 542.0, 873.0, 1816.0, 2784.0, 4002.0, 8384.0],
    [73, 232.0, 250.0, 496.0, 535.0, 863.0, 1795.0, 2751.0, 3954.0, 8285.0],
    [74, 229.0, 247.0, 490.0, 529.0, 853.0, 1774.0, 2719.0, 3908.0, 8189.0],
    [75, 226.0, 244.0, 484.0, 523.0, 843.0, 1754.0, 2688.0, 3863.0, 8095.0],
    [76, 224.0, 242.0, 478.0, 517.0, 834.0, 1735.0, 2658.0, 3819.0, 8003.0],
    [77, 221.0, 238.0, 473.0, 511.0, 824.0, 1716.0, 2629.0, 3776.0, 7914.0],
    [78, 218.8, 236.2, 468.0, 505.0, 815.0, 1697.0, 2600.0, 3735.0, 7827.0],
    [79, 216.5, 233.7, 463.0, 500.0, 806.0, 1679.0, 2572.0, 3694.0, 7742.0],
    [80, 214.2, 231.2, 457.5, 494.2, 797.8, 1661.0, 2545.0, 3654.0, 7658.0],
    [81, 211.9, 228.7, 452.5, 488.9, 789.3, 1644.0, 2518.0, 3615.0, 7577.0],
    [82, 209.7, 226.4, 447.7, 483.7, 781.1, 1627.0, 2492.0, 3578.0, 7497.0],
    [83, 207.6, 224.0, 443.0, 478.6, 773.0, 1611.0, 2466.0, 3541.0, 7420.0],
    [84, 205.5, 221.8, 438.5, 473.6, 765.2, 1594.0, 2442.0, 3505.0, 7354.0],
    [85, 203.5, 219.6, 434.0, 468.8, 757.4, 1579.0, 2417.0, 3470.0, 7270.0],
];

const recommendPaceCol = {
    "runningPower": 0,
    "EL-1000米-Low,EL-1000米-High": 1,
    "EL-1600米-Low": 2,
    "EL-1600米-High": 3,
    "M-1000米": 4,
    "M-1600米": 5,
    "T-400米": 6,
    "T-1000米": 7,
    "T-1600米": 8,
    "I-400米": 9,
    "I-1000米": 10,
    "I-1200米": 11,
    "I-1600米": 12,
    "R-200米": 13,
    "R-300米": 14,
    "R-400米": 15,
    "R-600米": 16,
    "R-800米": 17
};

const recommendPace = [
    [30, 444.0, 494.0, 720.0, 796.0, 423.0, 681.0, 146.0, 384.0, 618.0, 142.0, -1, -1, -1, 67.0, 101.0, -1, -1, -1],
    [31, 436.0, 482.0, 701.0, 777.0, 412.0, 662.0, 150.0, 374.0, 602.0, 138.0, -1, -1, -1, 65.0, 98.0, -1, -1, -1],
    [32, 425.0, 472.0, 684.0, 759.0, 400.0, 644.0, 146.0, 365.0, 587.0, 134.0, -1, -1, -1, 63.0, 95.0, -1, -1, -1],
    [33, 415.0, 461.0, 667.0, 741.0, 390.0, 627.0, 143.0, 356.0, 573.0, 131.0, -1, -1, -1, 61.0, 92.0, -1, -1, -1],
    [34, 405.0, 451.0, 652.0, 725.0, 380.0, 611.0, 139.0, 348.0, 560.0, 128.0, -1, -1, -1, 60.0, 90.0, 120.0, -1, -1],
    [35, 396.0, 441.0, 637.0, 709.0, 370.0, 596.0, 136.0, 340.0, 547.0, 125.0, -1, -1, -1, 58.0, 87.0, 117.0, -1, -1],
    [36, 387.0, 431.0, 623.0, 694.0, 361.0, 581.0, 133.0, 333.0, 535.0, 122.0, -1, -1, -1, 57.0, 85.0, 114.0, -1, -1],
    [37, 379.0, 422.0, 609.0, 680.0, 353.0, 568.0, 130.0, 326.0, 524.0, 119.0, 300.0, -1, -1, 55.0, 83.0, 111.0, -1, -1],
    [38, 371.0, 414.0, 596.0, 666.0, 345.0, 555.0, 127.0, 319.0, 513.0, 116.0, 294.0, -1, -1, 54.0, 81.0, 108.0, -1, -1],
    [39, 363.0, 406.0, 584.0, 653.0, 337.0, 542.0, 125.0, 312.0, 502.0, 114.0, 288.0, -1, -1, 53.0, 80.0, 106.0, -1, -1],
    [40, 356.0, 398.0, 572.0, 641.0, 329.0, 530.0, 122.0, 306.0, 492.0, 112.0, 282.0, -1, -1, 52.0, 78.0, 104.0, -1, -1],
    [41, 349.0, 391.0, 561.0, 628.0, 322.0, 519.0, 120.0, 300.0, 482.0, 110.0, 276.0, -1, -1, 51.0, 77.0, 102.0, -1, -1],
    [42, 342.0, 383.0, 550.0, 617.0, 316.0, 508.0, 117.0, 294.0, 472.0, 108.0, 271.0, -1, -1, 50.0, 75.0, 100.0, -1, -1],
    [43, 335.0, 376.0, 540.0, 605.0, 309.0, 497.0, 115.0, 289.0, 462.0, 106.0, 266.0, -1, -1, 49.0, 74.0, 98.0, -1, -1],
    [44, 329.0, 370.0, 530.0, 595.0, 303.0, 487.0, 113.0, 283.0, 453.0, 104.0, 261.0, -1, -1, 48.0, 72.0, 96.0, -1, -1],
    [45, 323.0, 363.0, 520.0, 584.0, 297.0, 478.0, 111.0, 278.0, 445.0, 102.0, 256.0, -1, -1, 47.0, 71.0, 94.0, -1, -1],
    [46, 317.0, 357.0, 511.0, 574.0, 291.0, 469.0, 109.0, 273.0, 437.0, 100.0, 252.0, 300.0, -1, 46.0, 69.0, 92.0, -1, -1],
    [47, 312.0, 351.0, 502.0, 565.0, 286.0, 460.0, 107.0, 269.0, 429.0, 98.0, 247.0, 294.0, -1, 45.0, 68.0, 90.0, -1, -1],
    [48, 307.0, 345.0, 493.0, 555.0, 281.0, 452.0, 105.0, 264.0, 422.0, 96.0, 243.0, 289.0, -1, 44.0, 67.0, 89.0, -1, -1],
    [49, 301.0, 340.0, 485.0, 546.0, 276.0, 444.0, 103.0, 260.0, 416.0, 95.0, 239.0, 285.0, -1, 44.0, 66.0, 88.0, -1, -1],
    [50, 296.0, 334.0, 477.0, 538.0, 271.0, 437.0, 101.0, 255.0, 410.0, 93.0, 235.0, 280.0, -1, 43.0, 65.0, 87.0, -1, -1],
    [51, 292.0, 329.0, 469.0, 529.0, 267.0, 429.0, 100.0, 251.0, 404.0, 92.0, 231.0, 276.0, -1, 43.0, 64.0, 86.0, -1, -1],
    [52, 287.0, 324.0, 462.0, 521.0, 262.0, 422.0, 98.0, 247.0, 398.0, 91.0, 228.0, 272.0, -1, 42.0, 64.0, 85.0, -1, -1],
    [53, 283.0, 319.0, 455.0, 513.0, 258.0, 416.0, 97.0, 244.0, 392.0, 90.0, 224.0, 269.0, -1, 42.0, 63.0, 84.0, -1, -1],
    [54, 278.0, 314.0, 448.0, 506.0, 254.0, 409.0, 95.0, 240.0, 386.0, 88.0, 221.0, 265.0, -1, 41.0, 62.0, 82.0, -1, -1],
    [55, 274.0, 310.0, 441.0, 498.0, 250.0, 403.0, 94.0, 236.0, 380.0, 87.0, 217.0, 261.0, -1, 40.0, 61.0, 81.0, -1, -1],
    [56, 270.0, 305.0, 435.0, 491.0, 246.0, 397.0, 93.0, 233.0, 375.0, 86.0, 214.0, 258.0, -1, 40.0, 60.0, 80.0, 120.0, -1],
    [57, 266.0, 301.0, 428.0, 484.0, 243.0, 391.0, 91.0, 230.0, 369.0, 85.0, 211.0, 254.0, -1, 39.0, 59.0, 79.0, 117.0, -1],
    [58, 262.0, 297.0, 422.0, 478.0, 239.0, 385.0, 90.0, 226.0, 364.0, 83.0, 208.0, 250.0, -1, 38.0, 58.0, 77.0, 115.0, -1],
    [59, 259.0, 293.0, 416.0, 471.0, 236.0, 379.0, 89.0, 223.0, 359.0, 82.0, 205.0, 247.0, -1, 38.0, 57.0, 76.0, 114.0, -1],
    [60, 255.0, 289.0, 410.0, 465.0, 232.0, 374.0, 88.0, 220.0, 354.0, 81.0, 203.0, 243.0, -1, 37.0, 56.0, 75.0, 112.0, -1],
    [61, 251.0, 285.0, 405.0, 459.0, 229.0, 369.0, 86.0, 217.0, 350.0, 80.0, 200.0, 240.0, -1, 37.0, 55.0, 74.0, 111.0, -1],
    [62, 248.0, 281.0, 399.0, 453.0, 226.0, 364.0, 85.0, 214.0, 345.0, 79.0, 197.0, 237.0, -1, 36.0, 54.0, 73.0, 109.0, -1],
    [63, 245.0, 278.0, 394.0, 447.0, 223.0, 359.0, 84.0, 212.0, 341.0, 78.0, 195.0, 234.0, -1, 36.0, 53.0, 72.0, 108.0, -1],
    [64, 242.0, 274.0, 389.0, 441.0, 220.0, 354.0, 83.0, 209.0, 336.0, 77.0, 192.0, 231.0, -1, 35.0, 52.0, 71.0, 106.0, -1],
    [65, 239.0, 271.0, 384.0, 436.0, 217.0, 349.0, 82.0, 206.0, 332.0, 76.0, 190.0, 228.0, -1, 35.0, 52.0, 70.0, 105.0, -1],
    [66, 236.0, 268.0, 379.0, 430.0, 214.0, 345.0, 81.0, 204.0, 328.0, 75.0, 188.0, 225.0, 300.0, 34.0, 51.0, 151.0, 103.0, -1],
    [67, 233.0, 264.0, 375.0, 425.0, 211.0, 340.0, 80.0, 201.0, 324.0, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [68, 230.0, 261.0, 370.0, 420.0, 209.0, 336.0, 79.0, 199.0, 320.0, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [69, 227.0, 258.0, 366.0, 415.0, 206.0, 332.0, 78.0, 196.0, 316.0, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [70, 224.0, 255.0, 361.0, 410.0, 204.0, 328.0, 77.0, 194.0, 313.0, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [71, 222.0, 252.0, 357.0, 406.0, 201.0, 324.0, 76.0, 192.0, 309.0, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [72, 220.0, 240.0, 353.0, 401.0, 199.0, 320.0, 76.0, 190.0, 305.0, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [73, 217.0, 247.0, 349.0, 397.0, 196.0, 316.0, 75.0, 188.0, 302.0, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [74, 214.0, 244.0, 345.0, 392.0, 194.0, 312.0, 74.0, 186.0, 299.0, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [75, 212.0, 241.0, 341.0, 388.0, 192.0, 309.0, 74.0, 184.0, 296.0, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [76, 210.0, 238.0, 338.0, 384.0, 190.0, 305.0, 73.0, 182.0, 292.0, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [77, 208.0, 236.0, 334.0, 380.0, 188.0, 302.0, 72.0, 180.0, 289.0, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [78, 205.0, 233.0, 330.0, 376.0, 186.0, 298.0, 71.0, 178.0, 286.0, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [79, 203.0, 231.0, 327.0, 372.0, 183.0, 295.0, 70.0, 176.0, 283.0, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [80, 201.0, 229.0, 324.0, 368.0, 181.0, 292.0, 70.0, 174.0, 281.0, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [81, 199.0, 226.0, 320.0, 364.0, 180.0, 289.0, 69.0, 173.0, 278.0, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [82, 197.0, 224.0, 317.0, 361.0, 178.0, 286.0, 68.0, 171.0, 275.0, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [83, 195.0, 222.0, 314.0, 357.0, 176.0, 283.0, 68.0, 169.0, 272.0, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [84, 193.0, 220.0, 311.0, 354.0, 174.0, 280.0, 67.0, 168.0, 270.0, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [85, 191.0, 218.0, 308.0, 350.0, 172.0, 277.0, 66.0, 166.0, 267.0, -1, -1, -1, -1, -1, -1, -1, -1, -1],
];

const lowRuningPower = [
    [20, 775.0, 2544.0, 97.0, -1, 100.0, 201.0, 208.0, 521.0, 838.0, 574.0, 926.0, 24240.0],
    [21, 744.0, 2449.0, 93.0, -1, 96.0, 193.0, 201.0, 503.0, 809.0, 556.0, 897.0, 23460.0],
    [22, 716.0, 2362.0, 90.0, -1, 93.0, 187.0, 194.0, 486.0, 782.0, 539.0, 869.0, 22740.0],
    [23, 690.0, 2281.0, 87.0, -1, 90.0, 181.0, 188.0, 470.0, 756.0, 523.0, 842.0, 22080.0],
    [24, 666.0, 2204.0, 84.0, -1, 87.0, 175.0, 182.0, 455.0, 733.0, 506.0, 816.0, 21360.0],
    [25, 643.0, 2133.0, 81.0, 122.0, 84.0, 168.0, 176.0, 441.0, 711.0, 490.0, 791.0, 20700.0],
    [26, 622.0, 2067.0, 79.0, 117.0, 82.0, 164.0, 171.0, 429.0, 690.0, 476.0, 767.0, 20100.0],
    [27, 602.0, 2005.0, 75.0, 113.0, 78.0, 158.0, 166.0, 416.0, 670.0, 461.0, 744.0, 19500.0],
    [28, 584.0, 1947.0, 73.0, 109.0, 77.0, 154.0, 162.0, 405.0, 652.0, 447.0, 722.0, 18900.0],
    [29, 567.0, 1892.0, 70.0, 105.0, 74.0, 148.0, 157.0, 394.0, 634.0, 435.0, 701.0, 18360.0],
    [30, 550.0, 1840.0, 68.0, 102.0, 71.0, 144.0, 153.0, 384.0, 618.0, 423.0, 681.0, 17820.0],
]

const lowRuningPowerCol = {
    "runningPower": 0,
    1600: 1,
    5000: 2,
    "R-200米": 3,
    "R-300米": 4,
    "I-200米": 5,
    "I-400米": 6,
    "T-400米": 7,
    "T-1000米": 8,
    "T-1600米": 9,
    "M-1000米": 10,
    "M-1600米": 11,
    "全马时间": 12,
}


function calculateRunningPower() {
    // 首先隐藏所有表格
    document.getElementById('resultTableHigh').style.display = 'none';
    document.getElementById('resultTableLow').style.display = 'none';
    document.getElementById('tableContainer').style.display = 'none';

    const raceDistance = Number(document.getElementById('raceDistance').value);
    const bestTime = document.getElementById('bestTime').value;

    // 将输入的时间字符串转换为秒数
    const timeArray = bestTime.split(':');
    const totalSeconds = parseInt(timeArray[0]) * 3600 + parseInt(timeArray[1]) * 60 + parseInt(timeArray[2]);
    var runningPowerValue = -1;

    // 查找对应的跑力值
    let col = runningPowerCol[raceDistance];
    for (let i = 0; i < runningPower.length; i++) {
        let minimumTime = runningPower[i][col]
        if (totalSeconds <= minimumTime) {
            runningPowerValue = runningPower[i][0];
        } else {
            break;
        }
    }

    if (runningPowerValue >= 30){
        // 根据找到的跑力值计算配速
        let paceRow = runningPower.find(row => row[0] === runningPowerValue);
        if (paceRow) {
            // 获取表格中所有配速单元格
            const paceElements = document.querySelectorAll('#resultTableHigh tbody td:last-child');

            // 从recommendPace数组中获取对应跑力值的行
            let recommendRow = recommendPace.find(row => row[0] === runningPowerValue);
            if (recommendRow) {
                paceElements.forEach((element, index) => {
                    if (index < 2) {
                        let baseIndex = index * 2 + 1;
                        let value1 = recommendRow[baseIndex];
                        let value2 = recommendRow[baseIndex + 1];
                        if (value1 !== -1 && value2 !== -1) {
                            element.textContent = `${formatPace(value1)}~${formatPace(value2)}`;
                        } else {
                            element.textContent = '-';
                        }
                    } else {  // 处理所有剩余的列
                        let value = recommendRow[index + 3];
                        element.textContent = value !== -1 ? formatPace(value) : '-';
                    }
                });
            }
        }
        if (runningPowerValue !== -1) {
            document.getElementById('result').innerHTML = `预估跑力值为：${runningPowerValue}`;
        } else {
            document.getElementById('result').innerHTML = `跑力计算失败`;
        }
        // 在计算完成后显示表格
        document.getElementById('tableContainer').style.display = 'block';
        document.getElementById('resultTableHigh').style.display = 'block';

    } else if (raceDistance === 1600 || raceDistance === 5000) {
        // 计算低跑力值
        let col = lowRuningPowerCol[raceDistance];
        for (let i = 0; i < lowRuningPower.length; i++) {
            let minimumTime = lowRuningPower[i][col]
            if (totalSeconds <= minimumTime) {
                runningPowerValue = lowRuningPower[i][0];
            } else {
                break;
            }
        }
        if (runningPowerValue !== -1) {
            document.getElementById('result').innerHTML = `预估跑力值为：${runningPowerValue}`;
        } else {
            document.getElementById('result').innerHTML = `跑力太低，多运动吧！`;
        }
            // 根据找到的低跑力值计算配速，配合页面中的低跑力值表格进行显示
        let paceRow = lowRuningPower.find(row => row[0] === runningPowerValue);
        if (paceRow) {
            const paceElements = document.querySelectorAll('#resultTableLow tbody td:last-child');
            paceElements.forEach((element, index) => {
                element.textContent = paceRow[index + 3] !== -1 ? formatPace(paceRow[index + 3]) : '-';
            });
        }

        // 在计算完成后显示表格
        document.getElementById('tableContainer').style.display = 'block';
        document.getElementById('resultTableLow').style.display = 'block';
        
    } else {
        document.getElementById('result').innerHTML = `跑力值预估低于30，请输入1600米或5000米最佳赛事成绩以预测跑力值！`;
    }
    

    
}

// 格式化配速显示
function formatPace(seconds) {
    if (!seconds || seconds === -1) return '-';
    var minutes = Math.floor(seconds / 60);
    var remainingSeconds = Math.floor(seconds % 60);
    if (minutes > 60) {
        var hours = Math.floor(minutes / 60);
        var minutes = Math.floor(minutes % 60);
        return `${hours}:${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
    } else {
        return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
    }
}